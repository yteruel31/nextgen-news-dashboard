// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  sessions      Session[]
  savedArticles SavedArticle[]
  account       Account?
  profile       Profile?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id          String      @id @default(cuid())
  googleId    String?     @unique
  password    String?
  salt        String?
  accountType AccountType
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  displayName String?
  image       String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SavedArticle {
  id          String                   @id @default(cuid())
  articleId   String
  userId      String
  user        User                     @relation(fields: [userId], references: [id])
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  keywordTags SavedArticleKeywordTag[]
}

model KeywordTag {
  id            String                   @id @default(cuid())
  keyword       String
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  savedArticles SavedArticleKeywordTag[]
}

model SavedArticleKeywordTag {
  savedArticleId String
  keywordTagId   String
  savedArticle   SavedArticle @relation(fields: [savedArticleId], references: [id])
  keywordTag     KeywordTag   @relation(fields: [keywordTagId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([savedArticleId, keywordTagId])
}

enum AccountType {
  EMAIL
  GOOGLE
}
